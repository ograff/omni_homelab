sonarr:
  image:
    repository: lscr.io/linuxserver/sonarr
    tag: version-4.0.15.2941
  ingress:
    main:
      enabled: true
  persistence:
    config:
      enabled: true
      retain: true
      size: 4Gi

    media: &media_mount
      enabled: true
      mountPath: /mnt/MediaAndTorrents
      type: pvc
      existingClaim: torrent-pvc
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "tunnel.2411.house"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/appName: Sonarr
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
        #hajimari.io/icon: file-document
      hosts:
        - host: &sonarr_host sonarr.2411.house
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: sonarr-tls-certificate
          hosts:
            - *sonarr_host
  dnsConfig:
    options:
      - name: ndots
        value: "1"
radarr:
  image:
    repository: lscr.io/linuxserver/radarr
    tag: 5.26.2.10099-ls276
  ingress:
    main:
      enabled: true
  persistence:
    config:
      enabled: true
      retain: true
      size: 4Gi

    media: *media_mount
  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "tunnel.2411.house"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/appName: Radarr
        #hajimari.io/icon: file-document
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
      hosts:
        - host: &radarr_host radarr.2411.house
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: radarr-tls-certificate
          hosts:
            - *radarr_host
  dnsConfig:
    options:
      - name: ndots
        value: "1"
jackett:
  image:
    repository: lscr.io/linuxserver/jackett
    tag: 0.22.2032
  ingress:
    main:
      enabled: true
  persistence:
    config:
      enabled: true
      retain: true
      size: 4Gi

  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "tunnel.2411.house"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/appName: Jackett
        #hajimari.io/icon: file-document
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
      hosts:
        - host: &jackett_host jackett.2411.house
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: jackett-tls-certificate
          hosts:
            - *jackett_host
  dnsConfig:
    options:
      - name: ndots
        value: "1"
flaresolverr:
  image:
    repository: 21hsmw/flaresolverr
    tag: nodriver
  ingress:
    main:
      enabled: false
  dnsConfig:
    options:
      - name: ndots
        value: "1"
bazarr:
  image:
    repository: lscr.io/linuxserver/bazarr
    tag: 1.5.2
  ingress:
    main:
      enabled: true
  persistence:
    config:
      enabled: true
      retain: true
      size: 4Gi
    media: *media_mount

  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "tunnel.2411.house"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/appName: Bazarr
        #hajimari.io/icon: file-document
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
      hosts:
        - host: &bazarr_host bazarr.2411.house
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: bazarr-tls-certificate
          hosts:
            - *bazarr_host
  dnsConfig:
    options:
      - name: ndots
        value: "1"

audiobookshelf:
  image:
    repository: advplyr/audiobookshelf
    tag: 2.26.0
  ingress:
    main:
      enabled: true
  persistence:
    config:
      enabled: true
      retain: true
      size: 4Gi
    media: *media_mount
    metadata:
      enable: true

  ingress:
    main:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/target: "tunnel.2411.house"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/appName: Audiobookshelf
        #hajimari.io/icon: file-document
        external-dns.alpha.kubernetes.io/target: "tunnel.2411.house"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
      hosts:
        - host: &audiobookshelf_host audiobooks.2411.house
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: audiobookshelf-tls-certificate
          hosts:
            - *audiobookshelf_host
  dnsConfig:
    options:
      - name: ndots
        value: "1"
qbit:
  image:
    # -- image repository
    repository: lscr.io/linuxserver/qbittorrent
    # -- image pull policy
    pullPolicy: IfNotPresent
    # -- image tag
    tag: 5.1.2
  sidecars:
    qbittorrent-exporter:
      image: martabal/qbittorrent-exporter:latest
      ports:
        - name: metrics
          containerPort: 8000
          protocol: TCP
      env:
        - name: QBITTORRENT_HOST
          value: "http://localhost:8080"  # qBittorrent web UI port
        - name: QBITTORRENT_USERNAME
          value: "admin"  # Change to your qBittorrent username
        - name: QBITTORRENT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: qbittorrent-secret  # You'll need to create this secret
              key: password
        - name: EXPORTER_PORT
          value: "8000"
        - name: EXPORTER_LOG_LEVEL
          value: "INFO"
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 50m
          memory: 64Mi
  env:
    TZ: America/Los_Angeles
    DOCKER_MODS: ghcr.io/vuetorrent/vuetorrent-lsio-mod:latest
  service:
    bittorrent:
      type: NodePort
      enabled: true
      ports:
        bittorrent:
          enabled: true
          port: 51413
          nodePort: 30400
          protocol: TCP
  persistence:
    config:
      enabled: true
      size: 10Gi
    downloads:
      enabled: true
      type: pvc
      existingClaim: downloads
      size: 90Gi
    media:
      enabled: true
      mountPath: /mnt/media_and_torrents
      type: pvc
      existingClaim: torrent-pvc
    vuetorrent:
      enabled: true
      type: emptyDir

  ingress:
    main:
      ## @param ingress.enabled Enable ingress record generation
      enabled: true
      ## @param ingress.className IngressClass that will be be used to implement the Ingress
      ingressClassName: "nginx"

      ## @param ingress.annotations [object] Additional annotations for the Ingress resource.
      annotations:
        external-dns.alpha.kubernetes.io/target: "tunnel.2411.house"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        hajimari.io/appName: Qbit
        #hajimari.io/icon: file-document
        external-dns.alpha.kubernetes.io/target: "tunnel.2411.house"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        nginx.ingress.kubernetes.io/proxy-body-size: "0"

      ## @param ingress.hosts [object] An array with ingress host objects, under which service should be reachable
      hosts:
        - host: &qbit_host qbit.2411.house
          paths:
            - path: /
              pathType: Prefix
  serviceMonitor:
    main:
      enabled: true
      endpoints:
        - port: metrics
          path: /metrics
          interval: 30s
          scrapeTimeout: 10s
      labels:
        release: prometheus  # Match your Prometheus operator labels
      serviceName: "{{ include \"bjw-s.common.lib.chart.names.fullname\" $ }}"
